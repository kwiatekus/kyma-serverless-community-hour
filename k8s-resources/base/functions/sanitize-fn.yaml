apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
    creationTimestamp: null
    name: sanitize-fn
    namespace: default
spec:
    deps: "{ \n  \"name\": \"sanitize-fn\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n        \"uuidv4\": \"6.2.12\",\n        \"string-sanitizer\": \"2.0.2\"\n  }\n}"
    env:
        - name: eventspecversion
          value: "1.0"
        - name: eventsource
          value: kyma
        - name: eventtype
          value: sap.kyma.custom.acme.payload.sanitised.v1
    runtime: nodejs16
    source: "const { v4: uuidv4 } = require('uuid');\nconst string = require(\"string-sanitizer\");\n\nmodule.exports = {\n    main: async function (event, context, callback) {\n\n        const message = `Hello World from the Kyma Function ${context[\"function-name\"]} running on ${context.runtime}!`;\n\n        console.log(message);\n\n        let sanitisedData = sanitise(event.data);\n\n        const eventOut = buildEventPayload(sanitisedData, event);\n        const response = await event.publishCloudEvent(eventOut)\n        \n        callback(response.status, response.statusText)\n    }\n}\nlet sanitise = (data)=>{\n    for (var key in data) {\n        if (data.hasOwnProperty(key)) {\n            let sanitized = string.sanitize(data[key])\n            console.log(`sanitizing ${data[key]} -> ${sanitized}`);\n            data[key]=sanitized\n        }\n    }\n    console.log(data);\n    return data;\n}\n\nlet buildEventPayload = (data, event)=>{\n    const eventType = process.env['eventtype']\n    const eventSource = process.env['eventsource']\n    const eventSpecVersion = process.env['eventspecversion']\n    var eventPayload=event.buildResponseCloudEvent(uuidv4(),eventType,data);\n    eventPayload.source=eventSource\n    eventPayload.specversion=eventSpecVersion;\n    return eventPayload;\n}"

---
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
    creationTimestamp: null
    name: data-in
    namespace: default
spec:
    gateway: kyma-gateway.kyma-system.svc.cluster.local
    rules:
        - accessStrategies:
            - handler: allow
          methods:
            - GET
          path: /.*
    service:
        host: data-in
        name: sanitize-fn
        port: 80

